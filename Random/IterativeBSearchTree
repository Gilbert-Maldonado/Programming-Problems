/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    
    private boolean hasNext = true;
    private Stack<TreeNode> stk = new Stack<>();
    
    public BSTIterator(TreeNode root) {
        if(root != null) {
            stk.push(root);
            goLeft(root, stk);
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stk.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode currentNode = stk.pop();
        int output = currentNode.val;
        
        if(currentNode.right != null) {
            currentNode = currentNode.right;
            stk.push(currentNode);
            currentNode = goLeft(currentNode, stk);
        }
        return output;
    }
    
    private TreeNode goLeft(TreeNode node, Stack<TreeNode> stk) {
        TreeNode temp = node;
        if(temp != null) {
            while(temp.left != null) {
                temp = temp.left;
                stk.push(temp);
            }
        }
        return temp;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
